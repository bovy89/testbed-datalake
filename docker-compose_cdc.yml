version: '3'
services:

  ############################
  # schema registry apicurio
  ############################
  apicurio-pg:
    container_name: apicurio-pg
    image: postgres:14
    environment:
      POSTGRES_USER: apicurio-registry
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes: 
      - apicurio-pg:/data/postgres
    networks:
      - example.com
  apicurio:
    container_name: apicurio
    image: apicurio/apicurio-registry-sql:2.4.3.Final
    restart: on-failure:5
    ports:
      - 127.0.0.1:8081:8080
    depends_on:
      - apicurio-pg
    environment:
      REGISTRY_DATASOURCE_URL: 'jdbc:postgresql://apicurio-pg/apicurio-registry'
      REGISTRY_DATASOURCE_USERNAME: apicurio-registry
      REGISTRY_DATASOURCE_PASSWORD: password
    networks:
      - example.com

  ############################
  # Kafka&Co
  ############################
  zookeeper:
    container_name: zookeeper
    image: quay.io/debezium/zookeeper:2.3
    networks:
      - example.com
  kafka:
    container_name: kafka
    image: quay.io/debezium/kafka:2.3
    restart: on-failure:5
    depends_on:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - example.com
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: on-failure:5
    ports:
      - 127.0.0.1:8888:8080
    depends_on:
      - kafka
      - apicurio
      - cdc-connect
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-connect:8083
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://apicurio:8080/apis/ccompat/v7
      KAFKA_CLUSTERS_0_READONLY: 'false'
      DYNAMIC_CONFIG_ENABLED: 'false'
    networks:
      - example.com
  debezium-connect:
    container_name: debezium-connect
    image: quay.io/debezium/connect:customsysinfo
    build: imgs/debezium-connect/
    restart: on-failure:5
    ports:
      - 127.0.0.1:8083:8083
    depends_on:
      - kafka
      - apicurio
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - ENABLE_DEBEZIUM_KC_REST_EXTENSION=true
      - ENABLE_DEBEZIUM_SCRIPTING=true
      - CONNECT_REST_EXTENSION_CLASSES=io.debezium.kcrestextension.DebeziumConnectRestExtension
      - ENABLE_APICURIO_CONVERTERS=true
      - KEY_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - VALUE_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_KEY_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_KEY_CONVERTER_APICURIO.REGISTRY_URL=http://apicurio:8080
      - CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER=true
      - CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_FIND-LATEST=true
      - CONNECT_VALUE_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_URL=http://apicurio:8080
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER=true
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_FIND-LATEST=true
      - CONNECT_SCHEMA_NAME_ADJUSTMENT_MODE=avro
      - CONNECT_MAX_REQUEST_SIZE=5048576
      - CONNECT_PRODUCER_MAX_REQUEST_SIZE=5048576
      - KAFKA_PRODUCER_MAX_REQUEST_SIZE=5048576
      - KAFKA_REPLICA_FETCH_MAX_BYTES=5048576
      - KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES=5048576
      - CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES=5048576
    networks:
      - example.com

  ############################
  # example databases
  ############################
  db-pg:
    container_name: db-pg
    # image: postgres:14-alpine
    # https://github.com/debezium/container-images/blob/main/examples/postgres/2.3/Dockerfile
    image: quay.io/debezium/example-postgres:2.3
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=example
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - example.com
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -p 5432
      interval: 10s
      timeout: 10s
      retries: 5
  db-mongo:
    container_name: db-mongo
    image: mongo:6.0
    entrypoint: ["/usr/bin/mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--setParameter", "authenticationMechanisms=SCRAM-SHA-256"]
    restart: on-failure:5
    ports:
      - "37017:27017"
    networks:
      - example.com
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb:27017'}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
      interval: 5s
      timeout: 10s
      retries: 5
  mongo-initializer:
    container_name: mongo-initializer
    image: mongo:6.0
    depends_on:
      - db-mongo
    command:
      - bash
      - -c
      - |
        sleep 20 && mongosh --host db-mongo --port 27017 --eval "rs.initiate();" &&
        mongosh --host db-mongo --port 27017 /docker-entrypoint-initdb.d/init-mongodb-users.js
    volumes:
      - ./resources/mongodb/init-mongodb-users.js:/docker-entrypoint-initdb.d/init-mongodb-users.js
    networks:
      - example.com

networks:
  example.com:
    external: false
    name: example.com

volumes:
  apicurio-pg:
